Note: This file is essentially a quick and dirty ticket backlog.
Most of these items could be entered as actual tickets.
Some of these items are simply ramblings and thoughts that I wish to hold onto for further consideration before implementing any changes.

==================== TICKETS ====================

caesars - bots fall down jedigreedo glass elev shaft - seem to "force jump" sbx-style in midair on the way down, so no fall damage taken (I suspect the bot is trying to "jump" over an obstruction) -- update: 2022-09-30 - cannot reproduce, is this still an issue?
caesars - bot gets trapped in elevator sharft below jedigreedo room, doesn't try to jump out of shaft, keeps trying to jump/go up to top of shaft
caesars - bots try to attack each other through glass
caesars - pathing around corner past kitchen ramp to elevator on casino floor is rough
caesars - going up waterfall, jumping out of water to go up elevator - not reliable
caesars - waterfall nodes in water - bots strafe swim around them but fail to reach them - not reliable
caesars - bot going down waterfall was lookup up at the rooftop bridge thing - was he looking at an enemy or the repeater/power cells?  he wasn't shooting at the time
caesars - more casino area paths
caesars - add elevator shaft "middle" nodes or extend bot lost timeout somehow
caesars - paths through slashable grate vents?
caesars - disable 'touched' message for hotel elevator - walking into the elevator walls triggers elevator movement
		--> well, maybe? we probably would want a touched message to move the elevator if the bot gets caught underneath the elevator.  Since the elevator move duration is so long, maybe it doesn't matter here since the bot will normally jump out of the shaft in time, and in the rare exception case, the bot will kill itself if it gets trapped under the elevator

general - #techdebt - reorder level cogs to match the original LEC levels (cogs for doors, force fields, etc. that were in the original map by LEC). This will aid in comparing bot-enabled maps with their LEC counterparts.

general - #techdebt - consider using maven wrapper (mvnw) to make it easier for folks to build the project (still need to manually build dependencies, but it would be good to eliminate the need for manual Maven install)

general - #techdebt - test.bat scripts don't work reliably on Windows 10 (the %~s1 param doesn't produce a short file path if 8.3 names are not enabled, causing the game launch to fail)
general - #techdebt - test.bat scripts launch GOG versions of JK/MotS in fullscreen mode (GOG versions invert the meaning of the -windowgui option) ; UPDATE 11/23 - my GOG version launches in full screen regardless of whether -windowgui is used or not, and regardless of whether JK.EXE or JKStart.exe is invoked

general - #special #revisit - refine bot activation trigger with a means to direct the message to a specific cog? Perhaps with a param that the cog would understand (e.g. which button was pushed, desired enable/disable state for a trap, etc.). Update: This may be needlessly generic. rbot-elev-call.cog was much easier to implement with just specifying the nodes it needs and letting it worry about the map state logic, rather than trying to make a generic conditional activate trigger. It may be worthwhile to abandon the activate trigger and just model the other cogs after rbot-elev-call.cog and rbot-door-switch.cog going forward.
general - #special #revisit - refine bot special info to accept parameters to customize behavior (e.g. jump height scale for precision jumping). Update: It may be worthwhile to move these sort of special behaviors to dedicated action cogs (e.g. make a new cog named rbot-jump.cog or something), or fold into the cog that knows the conditions (e.g. rbot-elev-call.cog) rather than trying to roll a generic special cog for all special actions.

general - improve blinded bot behavior - right now, bots simply move to a random location. Investigate more sophisticated behavior, such as navigating paths but simulate not being able to see well (e.g. move to node position +/- random vector offset based on difficulty?)

general - #techdebt - retire hacked force power cogs (grip pull deadlysight blinding) - I believe it is possible to reimplement the bot force power handling so custom force_*.cog files are not needed. The bots can return an appropriate value from the skill message to let the original force power cog handle the actor effects (just as the actor_*.cog files do). The bot force cog will need to implement the required effects on the player (just as the darkjedi_*.cog files do) as well as on other bots (like kyle.cog? or like darkjedi_*.cog? either way would probably work. Probably darkjedi_*.cog style would be cleaner as most of the handling code would then be the same for both bots and players, rather than having a skill-like handler for bots and a force_*.cog like handler for players).
		--> UPDATE: This may be more trouble than it's worth. Force blinding just sets the 0x800/blind flag on actors without sending a skill message, and some of the MotS powers (including push and chainlight) do likewise and apply effects to actors without sending a skill message. A compromise may be to keep the hacked force powers for "best/most authentic experience" but stub some skill message content that will allow the vanilla force cogs to still interact with the bots for "acceptable experience" in case the nohotkeys patch cannot be used for some reason.

general - #techdebt - retire hacked player and backpack cogs - Assuming another solution can be found to replace the bot score hack in kyle.cog, I believe it is possible to use the vanilla kyle.cog and pow_backpack.cog files, and to use rbot-backpack.cog for only the backpacks dropped by bots (bot srv cogs can handle force fx on player just like dark jedi cogs do, no skill trigger hacks needed)

general - #techdebt - refactor cog ref arrays to linked list iteration (startup/srv?, admin/srv? nav/nav-special, nav/path, path/pathinfo?)
general - #techdebt - phase out SendMessageEx based API and use triggers instead
			--> NO!  Performance testing demonstrates that messages are more efficient (as expected) as too many triggers does hurt performance (e.g. item special info triggers)
			--> Demonstration: compare performance in challenge map with the "if (GetThingType(item) == 5)" check enabled/disabled in findpowerups message - night and day difference, even though there is still noticeable lag even with the check enabled
			--> Cogs that still use triggers that could be adjusted to use SendMessageEx: nav, nav-special, path, pathinfo, item-special, player/srv-force (skill trigger)
			--> There is a noticeable stutter at startup when the bots all spawn. I believe this is due to triggers being sent between the nav/path/pathinfo cogs to locate the nearest node for each bot. The stutter is from all bots doing this (relatively) expensive call at the same time. Debug output for challenge map (8 bots initially) suggests about 650 nav/path/pathinfo triggers are sent for EACH of the 8 initial 'bot lost' triggers (so 8*650 = 5200 triggers total at startup to handle all initial 'bot lost')

general - bots may be a bit too consistently accurate on lower difficulties, adjust accuracy curve so the difference is more noticeable
general - default bot difficulty based on player selected difficulty (GetDifficulty()), remove difficulty param from startup cog
general - higher bot difficulty idea - if bot and target are about level with each other (Z diff < some small JKU value), shoot explosive projectiles (primary fire for raildet and concrifle) at ground by target instead of trying to hit target directly?  If the bot has trouble hitting the target with a direct shot, shooting the ground like a player often would might be better

general - #scoring - when score limit is set, match does not end until player reaches the score limit and then dies. Note: player score must not go below the limit as a result of dying. For example, if the player reaches the limit and then gets a suicide, the score is reduced to limit-1 and the match doesn't end. However, if the player reaches the limit and then gets killed by a bot, the game counts it as a suicide and reduces the score, but the startup cog corrects this and returns the player score to the limit, so the match will end. Note: CTF correctly ends when score limit is reached. CTF uses jkEndLevel(1) to end the level after displaying scores.

general - #techdebt refactor startup cog to not create bot spawn point things (i.e. retire rbot_respawn template) so we don't needlessly consume up to 32 thing refs (we can use vectors, sectors, etc. instead)
general - creating a thing at bot's next location / item / target enables monitoring within botcam and also to "highlight" multiple items concurrently. The infrastructure for this is already present now because of the node removal feature
general - some nodes are too high in existing maps (including bes, spaceport=DONE, TBD)
general - check bot speed when walking backward. Is it the correct speed (i.e. slowed) or does bot move at same speed as when running forward?

general - #navigation - capture touched message for temporary node thing to detect when bot reaches the node. This will help prevent a bot missing small nodes because of passing through them between AI pulses.

general - #navigation - path changing - pick fairly even when multiple intersections are from a single path (e.g. path starts and ends with same node, or node occurs multiple times in the path)
general - #navigation - lost bot - if a lost bot is nearest the node that starts and ends a looping path, the bot will always run forward on the path. I believe this is because the nav cog skips over the currently-saved candidate node instead of randomly choosing from among the "duplicate" choices. I think the logic could be altered so when the current candidate node is encountered again in another path/node index, then it can do a random check to swap the new instance with the saved instance. This can be a fair check like the intersection path change check (1 in N+1 chance to select a path at an N-way intersection)
general - #navigation #improvement - navigate paths more intelligently to find desired powerups (instead of wandering randomly)
general - #navigation #feature - allow paths to be weighted. The weight factor adjusts how likely a bot is to pick a particular path. If weight <= 0, ignore path; otherwise, chance = weight / (weight + otherweight) ? (check the math, make sure it maintains fair path selection)
general - #navigation - path cog: refactor unidirectional, nonlooping into path flags (like original release) but allow setting/clearing flags in the same way as enabling/disabling a path (suggested flags: 0x1/non-looping, 0x2/cannot run forward on path, 0x4/cannot run backward on path. Disabled = 0x6 = 0x2 + 0x4, or is there a reason we would need a dedicated flag?)
general - #navigation #arrival #improvement - review default 30 second arrival timeout; this might be too long for the usual case. Should it be 10.0 or 20.0 instead?
general - #navigation #arrival #bug - arrival cog attempts to generate duplicate/redundant arrival events when same arriver is used in multiple slots. I think what is happening is, when the arriver is used in multiple slots, the game will send multiple arrived messages to the cog, one for each slot where the arriver is used, because of the arriver being a linked symbol passed in from the JKL. For example, elevators often use two slots, one for the bottom floor, and the other for the top floor, so the arrival cog would receive two arrived messages. Fortunately, what would be redundant arrival events are suppressed thanks to the waiting0-9 vars (i.e. the first event gets sent while waitingX is 1, but sending the event sets waitingX to 0, so the second event gets suppressed). The good news is, even if the events weren't suppressed, they are still technically correct for the situation (just redundant), so no unexpected side effects should occur other than redundant triggers being sent.

general - bot shields do not function exactly like player shields - at 50 shields, damage starts to be split between shields and health for players, but for bots, the shields must be depleted completely before the bot will start taking health damage. See TODO in rbot-srv.cog
general - make bot pit death behave more like player - player will fade to black and respawn without dropping a backpack, but buts will kill themselves and needlessly drop a backpack. It would be nice to emulate the player pit death behavior as much as possible. Perhaps as an initial step, the killed message could skip creating the backpack if the bot died in a pit.
general - #techdebt does the bot pit check need to be its own timer? could it just be part of the ordinary AI pulse? Are there other periodic timers that could also be refactored this way?

general - #weapons #techdebt - saber_block procedure should check for 0x400 weapon flag when deflecting a projectile
general - #weapons - (possibly unfixable) when bot dies, it gets a new thing number - mines, etc. created before the bot respawn will not score the bot points.
general - #weapons #improvement - can we use the 0x2000 actor flag to deflect projectiles rather than creating new projectiles in the damaged message? testing indicates that creating yun in MP and assigning that flag enables deflection of projectiles even though the weapon mesh and saber blade rendering doesn't work.

general - #powerups - additional powerups that could be supported: stbp, lightsaber, goggles, battery
general - #powerups - add ability to pickup rbacta (e.g. in freezer), st backpack (e.g. in spaceport), etc. powerups
general - #powerups - teach bots how to use bacta tanks to heal

general - #techdebt - following srv-weapons refactoring, srv move procedure may now allow bots to move when they shouldn't be able to (e.g. gripped, awaiting event)
general - #techdebt - there is at least one edge case where the bot may get stuck awaiting an event indefinitely. For example, in challenge, teleport the bot into the elevator shaft leading up to the gold base. If the bot has an arrival_event set, he will wait at the node for the elevator to reach frame 1. Normally, this would time out and the bot would continue on his way, but if he starts seeking a powerup while holding position waiting for the event, then the bot will remain indefinitely stuck because the bot lost timer is being reset by the item seeking. Unsure if the problem can be reproduced without the rbot-admin-teleport function.

general - #techdebt - srv-force recalculates rank and jedirank on demand; adjust to recalculate in trigger to save on if statement limit count
general = #techdebt - consider changing cog discovery trigger ID to "rbots" magic number (82687)

general - #feature #special - add special flag to make bot crouch. Can set/clear the 0x10000 physics flag to control bot crouching. Need to set appropriate AI move speed in checkspeed, else bot will move at run speed while crouching.
general - #feature #special - add special(?) flag to make bot use lightsaber to slash open a grate

general - #techdebt - check for duplicate bot names (I see 4 duplicates in mots/kfy. Haven't checked jk/ctf); -- example command: grep -o "botname:int=[0-9]*" temple-1.jed | gsort | uniq -c

ctf/kfy - #techdebt - CTF/KFY/botname cogstring collision - CTF/KFY uses cogstrings in the 10xx range, which conflict with the default bot name strings needed for rbots - as a workaround, the CTF/KFY maps use the 15xx range for botnames instead of 10xx - all bot names add +500 to match this change
	--> caesars needed to do this, too

ctf/kfy - #bug - return timer isn't cancelled when a dropped flag/ysalamiri is picked up, so if the new carrier is killed before the previous timer finishes, that old timer may prematurely send the dropped flag/ysalamiri home. This bug is present in the original LEC implementation of CTF/KFY. It is not specific to Rbots.

ctf/kfy - #improvement - simulate the bot being able to hear that a flag/ysalamiri is nearby to better replicate actual player behavior. e.g. something like if < 1.0 JKU away and HasLOS, make bot turn to face the item so he doesn't inadvertently miss the item and run away without it. For example, bot dies beside doorway, so flag is out of view for bots that are coming through the doorway, then the bot doesn't try to get the item  after coming through the doorway because it is now behind him and he doesn't see it. A real player would likely hear it and recognize that they are right next to it and turn around, especially in KFY with the distinctive ysalamiri chirping.

	TODO kfy - force power bubbles support


mots - #techdebt - cog cleanup, check for and remove unused (e.g. rbot tdets nar cog?)
mots - feature: in team play, use personality skins, not just kyle team skins
mots - #forcepowers - additional force powers support (powers not yet supported by rbots are still handled in the player cog skill message)
mots - #forcepowers - force bubble handling (this is mainly for KFY, but it is technically a general MotS function and not inherently KFY-specific)
mots - #weapons - additional weapons support (additional templates that need to be supported: flash_bombs, srailcharges, carbgun, fivepellets, scope, npconcrifle, ... (only exhaustive for first 5 mots levels supported by rbots; other levels not scanned for unsupported powerups yet)) (note: it appears that only the vaporator map contains a blastech pistol powerup placed in the map (as a greedopistol template). The bot will not be able to acquire a blastech pistol in any other map unless bot or player personalities are used to give the blastech on respawn. Other new weapons, including the scope, flash bombs, seeker rail charges, and the carbonite gun, are available in multiple map)
mots - #weapons - I think the player can freeze and kill bots that have a supershield - supershield normally protects player from being frozen (see skill message in kyle_m.cog)
mots - #weapons #carbonite - can players damage carbonite frozen teammates? what happens when a bot is damaged by a teammate? does he take any damage?

duel - bots try to walk through force fields - maybe we can adjust paths and disable segments going through doorways when force fields are active?
duel - polish the paths to maximize map coverage
duel - #navigation - bots reverse direction in the duel map when capturing flag. Is this due to ctf pathinfo calc reversing path direction to other base? i.e. bot runs up to flag, then reverses direction and goes back down the way he came from, rather than continuing to run forward.

arena - teach the bots how to get to the raildet and concrifle secret areas (could probably teach the bots how to get the revive in the lower area too, but this might be more complicated than it's worth)

challenge - for some reason, the SAS doors don't always work for bots (gold side colored SAS has issues - red side colored SAS also has issues - need to confirm other cases)
challenge - bots will get stuck in the elevator shaft leading up to the gold base, probably from multiple bots awaiting arrival of the elevator and both attempting to enter the shaft when it arrives (first bot gets on elevator, second bot falls into shaft). The bot is unable to get out of the shaft in most cases, blocking the elevator from arriving for other bots.
challenge - #improvement - bots may not be reliably picking up the red key. Would the 'ignore LOS' item special flag help?
challenge - #navigation #improvement - could improve the fan puzzle cog to not require bots to await arrival event for a short time after the fan stops. Currently, the cog only allows the bots to go down the fan shaft at the moment the fan stops; if the bot is not already awaiting the event at that moment, then the bot must wait until the next cycle. In reality, the bot could actually safely go down the shaft up to a few moments after this point as well.

bes - #traps - bots don't use the force field trap

nar - bots try to walk through the force field
nar - bots try to run the wrong way on the conveyor belts - srv doesn't detect bot obstructed, since the "velocity" (relative to the moving floor) is "good"
nar - #navigation - redo paths - upper area by force field needs node size tweaks to mitigate bots falling; path leading from conveyor to elevator is unidirectional, so the bot will only go up the elevator on the right side and never down (this is leftover from the old rbot-nav cog that limited path count and size)

oasis - #techdebt - custom lightning trap cog uses auto-aim (FireProjectile) while original cog does not (CreateThing). Probably done to make the lightning actually hit the bots. Or maybe just an oversight. Anyway, the auto-aim only has an effect if auto-aim is enabled in the player's setup menu options
oasis - #navigation #improvement #techdebt - some paths can be combined into longer paths (they are split because of old nav cog limitations), some unidirectional paths can probably be adjusted for bidirectional navigation

valley - pathing through lower level could be improved for reliability, sometimes bots don't quite navigate the path exactly as intended and the bot will end up behind a crate or close to/under the elevator as a result
valley - sometimes bot jumping onto elevator in lower area isn't quite right due to change in bot jump height in previous commit

freezer - item seeking causes bots to jump over/into pits in center area
freezer - there was a weird case under the platform by the elevator/windows where the bot wasn't running and could only jump (like the outer catwalk in the gantry map)
freezer - bots sometimes/often can't properly ride the rising air by the elevators up toward the central area (update: bots seem to fail riding it up when they first enter the room, but after a 'bot lost', they turn around, walk into the stream, and then successfully ride it up to the upper level)
freezer - #traps - bots don't use the carbonite pit trap

canopy - #addbotsupport - add support for bots

palace - #addbotsupport - add support for bots

reactor - #addbotsupport - add support for bots

throne - bots sometimes jump over/into pits (usually in combat mode trying to reach enemy bots)

vaporator - #improvement #navigation - add path to let bot slash the grate on the top floor and crouch in to get the scope (requires implementation of grate slashing and crouching capabilities for bots)

cargo - #addbotsupport - add support for bots

homestead - #addbotsupport - add support for bots

spaceport - #navigation - implement paths to currently unreachable areas (e.g. sniper window, top of moldy crow) and add alternate paths (e.g. drop down from concrifle room, cantina balcony) and hidden powerups (e.g. power boost)

bespin - #addbotsupport - add support for bots (note: improve freezer and gantry as much as possible before implementing bespin to reduce duplicated effort)

tibanna - #navigation - add path to jump down from top outside area to platform with camera console?

fortress - #addbotsupport #kfy - add support for bots

training - #addbotsupport #kfy - add support for bots

temple - #navigation - bots sometimes get temporarily stuck behind doorway extruded frames; Update: paths/nodes have been tweaked during KFY implementation, is this still an issue?
temple - #navigation #improvement - can we teach the bots how to jump up the rubble to the bridge so they can go up the stairs and get the supershield? maybe it's not worth the trouble for just a supershield, though. And a few rail charges.

coolant - #addbotsupport #kfy - add support for bots

datamaster - #documentation - consider adding a note that int values >= 2^24 (16777216) are not reliably handled by cog in some cases (e.g. SendMessageEx params, perhaps also the heap verbs -- see sige notes) -- maybe add this to the integer section on the "Notes on symbol types" popup? That section is already talking about integer min/max limits, etc.
datamaster - #documentation - SetWallCel returns the current cel of the surface (similar to SetThingModel returning the current thing model)
datamaster - #documentation - Add note that killed: gets sent when a powerup is taken (see ctf_main.cog)
datamaster - #documentation - 0x40 AI mode flag disables cliff check, allows actors to walk over cliff edges freely

==================== IDEAS ====================

** Rbots Jed Plugin **

	would this be at all useful?
	could even just do JS+OLE - don't necessarily need a compiled EXE/DLL

	plugin ideas:
	DONE
		Upgrade to current Rbots (convert rbot-nav.cog into rbot-nav.cog + rbot-path.cogs + rbot-pathinfo-ctf.cogs, add rbot-srv-force.cog from rbot-srv.cog, etc.)
		Rbot Consistency Checker
			validate bot ids, path ids, check for missing/duplicate cogs, etc.
				this could have knowledge of CTF/MotS, too -- if CTF_MAIN.COG present or Jed in MotS mode, tweak handling accordingly
		(alpha prototype) Path preview using 3d preview
	TODO
		Create path from selection
			select node things, add a new path
		Cog management GUI? (add/remove/reorder bots, etc.)
		Set node height from ground (does OLE API give enough to impl this? put on your geometry hat...)
		Bot model wizard (for JK):
			Select base model (e.g. kya18.3do), generate weapon mesh models (yun-0.3do, yun-1.3do, etc.)
			Basically incorporate the standalone Rbots Character Wizard into the plugin, but allow selection of models, etc. via JED (use game paths, etc. to find stuff in GOBs)
		Bot template wizard:
			prompt for 3do, soundclass, etc. and update master.tpl/mots.tpl
		Add bot wizard:
			prompt for skin, name, flags, team, etc.
		Layer path nodes:
			put all path node things in navigation layer
			(or maybe more generally, a plugin to select nodes - all or by path
		bot arrival node wizard
			automate setting up a node for bot arrival cog
		node/surf/sector special info management (display, set info)

** MAYBE -- Level-based bot admin menu **

	make bot admin a map-accessible feature so it will work with more mods
	use rbot patch only for "remote control" to bot admin, not as full impl

	this may rely on unsync'd createthingatpos to create a HUD menu that follows the player's POV
		of course, if it's a map based menu, how does the player "click"?  that would normally be a weapon fire message or a bin activate message, right?

** Character flags **
	The character flags params have been removed since the feature was never implemented.
	Refer to the duel map for example of where it had been configured, even though it wasn't used (it was basically alternating charflags=1,1,2,2,1,1,2,2,... like the force power usage)

	defensive and offensive idea - have path flags entered in rbot-pathinfo-ctf.cog for each path that indicate whether the path is usable for each personality type
	alternatively, set min/max path ranks that the bot can use
	really, the bot can use any path, but if it comes across a "preferred" path, it will try to use that instead
	the idea is to have defensive bots stay close to their own base and offensive close to the opposing base (unless they steal the flag)

** More Nav Flags and lost bots handling **

	TODO	this may eliminate the need for the new nav flags:
		when bot lost and nav can't find node, start a timer to query nav every second for nearest node
		stop timer on bot death or nav returning a node
		separate timer to randomly regenerate a lost wander vector every 3 seconds
		tbd - lostcount changes
		--> see lost-bot-cleanup shelve for WIP
	TODO	stretch - nav cog - flag to ignore vertical distance checks when finding node for lost bot
	TODO	stretch - nav cog - flag to ignore LOS, vertical distance checks, etc. if bot and node are in the same sector when finding node for lost bot
	TODO	propagate changes to other maps/episodes, then squash merge back to master

** OBE: To ID or not to ID? **
	It's nice to have stuff work without needing to manage IDs (e.g. path cogs), but it makes some things harder because you would need to deduce the synthesized ID somehow or be given a cog reference number.
	Manually assigned IDs, although slightly extra work for the developer, are more trigger-friendly and make it easier to reference the cog by its identity rather than as a hard reference number that potentially needs to be converted to an ID for the rest of the system to work.
	For example, it would be a bit clearer to add rbot-path.cog with id=13 and add rbot-path-special-ctf.cog (or whatever) with id=13, rather than using cog numbers (e.g. cog #83)
	If ID auto-generation is needed, here's an idea to generate ordered IDs from 0..N-1, given N cogs:
		In e.g. rbot-path.cog
			startup:
			...
				SendTrigger(-1, 12345, ... GetSelfCog(), ...);
			...
			trigger:
			...
				if (GetSOurceRef() == 12345) {
					if (GetSelfCog() > GetParam(...)) id = id + 1;
		In e.g. rbot-nav.cog
			trigger:
			...
				if (GetSOurceRef() == 12345) {
					path_count = path_count + 1; // Increment for each path discovered
			...
				// for each path
			...
					// Ask path with some ID to return info
					SendTrigger(-1, 12003, path_id, params...)

** Compress path node gaps **
	It would be nice if the path cogs could automatically "compress" a node list like:
		-1, -1, 443, 444, 465, -1, 467, -1, ...
	into a compacted form like:
		443, 444, 465, 467, -1, ... (path_size = 4)
	This would alleviate the burden of developers manually compressing path nodes in ZED
	Example code:
		path_size = 0; // while iterating, always points to the next open node slot
		for (i = 0 ; i < 25 ; i = i + 1) {
			if (node0[i] != -1 && path_size < i) {
				// There are gaps in the node list, compact the list into contiguous form by
				// moving nodes backward to fill any gaps
				node0[path_size] = node0[i];
				node0[i] = -1; // optional - make sure unused node slots are cleared
				path_size = path_size + 1;
			}
		}

** Saber fighting improvements **
	+rbotsaberhit1 template is not used.
	srv timer id 200 and 201 are the same code
	When bot blocks player saber, +ssparks_blood gets created (by game engine) instead of +ssparks_saber.
	Bot saber attacks (+rbotsaber1/2 templates) don't create any of the +ssparks_* templates.

	Idea: Add class cog to +rbotsaber1/2 that can receive feedback from the srv cog and create the appropriate explosion template.
	For example, the +rbotsaber1/2 templates could have a class cog resembling:
		user0:
			exp = GetParam(0);
			hit_type = GetParam(1);
			SetThingUserData(exp, hit_type);
			return;
		removed:  // or timer+DestroyThing()
			
			if (GetThingUserData(exp) == 1) // create +ssparks_saber
			else // create ++ssparks_blood
			return;
	The srv cog could send a user0 message to the class cog of the damager when the bot has blocked the saber attack.
	Actually, there's a parent/child discrepancy here that needs to be resolved. +rbotsaber1/2 is what the srv cog would have as 'damager' but the message needs to be delivered to the explosion thing

	Demo: See branch experiment-saber-fx to demo creation of FX things by srv cog

==================== UNFIXABLE? ====================

general - purple saber mesh appears as gray in non-3d-accel mode
	--> I think this is because of colormap translucency mappings.  Namely, I think the colormap defines that when color X is viewed through color Y, it should be shown as color Z - X, Y, and Z must all be colors in the colormap, but 3d accel mode can "invent" the colors on the fly rather than being limited to the colors in the colormap.  The issue is that there are no purple-like colors in the colormap, so for the "color X shown through Y/purple" case, the only reasonable choice for Z is a gray-like color

general - when bots use force persuasion, player cannot see them (except on overlay map) when using force seeing -- unfortunately, this is probably not easily fixable since the game engine magically reveals applicable invisible players/actors based on whether bin 23 is active or not and this only works if the thing exists at map load time and has the 0x200 actor flag (i.e. similar barrier to actors having dynamic weapon meshes).
			--> bot also does not have twinkle stars (in JK)
			--> This issue does not apply to MotS - in the MotS version, bots are correctly shown/hidden by the engine as expected AND have force twinkle stars!
			--> workaround - there is a hack in the srv force cog to show/hide the bot based on whether bin 23 (force seeing) for the local player is active
			--> If player's force seeing is active when bot activates force persuasion, the bot momentarily "blinks" (geo 0) until the hack pulse sets it back (to geo 4).
