Note: This file is essentially a quick and dirty ticket backlog.
Most of these items could be entered as actual tickets.
Some of these items are simply ramblings and thoughts that I wish to hold onto for further consideration before implementing any changes.

==================== TICKETS ====================

caesars - bots fall down jedigreedo glass elev shaft - seem to "force jump" sbx-style in midair on the way down, so no fall damage taken (I suspect the bot is trying to "jump" over an obstruction) -- update: 2022-09-30 - cannot reproduce, is this still an issue?
caesars - bot gets trapped in elevator sharft below jedigreedo room, doesn't try to jump out of shaft, keeps trying to jump/go up to top of shaft
caesars - bots try to attack each other through glass
caesars - pathing around corner past kitchen ramp to elevator on casino floor is rough
caesars - going up waterfall, jumping out of water to go up elevator - not reliable
caesars - waterfall nodes in water - bots strafe swim around them but fail to reach them - not reliable
caesars - bot going down waterfall was lookup up at the rooftop bridge thing - was he looking at an enemy or the repeater/power cells?  he wasn't shooting at the time
caesars - more casino area paths
caesars - add elevator shaft "middle" nodes or extend bot lost timeout somehow
caesars - paths through slashable grate vents?
caesars - disable 'touched' message for hotel elevator - walking into the elevator walls triggers elevator movement
		--> well, maybe? we probably would want a touched message to move the elevator if the bot gets caught underneath the elevator.  Since the elevator move duration is so long, maybe it doesn't matter here since the bot will normally jump out of the shaft in time, and in the rare exception case, the bot will kill itself if it gets trapped under the elevator

general - consider using maven wrapper (mvnw) to make it easier for folks to build the project (still need to manually build dependencies, but it would be good to eliminate the need for manual Maven install)

general - test.bat scripts don't work reliably on Windows 10 (the %~s1 param doesn't produce a short file path if 8.3 names are not enabled, causing the game launch to fail)
general - test.bat scripts launch GOG versions of JK/MotS in fullscreen mode (GOG versions invert the meaning of the -windowgui option)

general - refine bot activation trigger with a means to direct the message to a specific cog? Perhaps with a param that the cog would understand (e.g. which button was pushed, desired enable/disable state for a trap, etc.)
general - refine bot special info to accept parameters to customize behavior (e.g. jump height scale for precision jumping)
general - path cog: refactor unidirectional, nonlooping into path flags (like original release) but allow setting/clearing flags in the same way as enabling/disabling a path (suggested flags: 0x1/unidirectional, 0x2/looping, 0x4/disabled, 0x8/run backwards if unidirectional)

general - elevator + door event mask - allow user to filter entered, touched, etc. events for players and bots

general - fists, check rate of fire, might be too fast

general - improve blinded bot behavior - right now, bots simply move to a random location. Investigate more sophisticated behavior, such as navigating paths but simulate not being able to see well (e.g. move to node position +/- random vector offset based on difficulty?)

general - technical debt - retire hacked force power cogs (grip pull deadlysight blinding) - I believe it is possible to reimplement the bot force power handling so custom force_*.cog files are not needed. The bots can return an appropriate value from the skill message to let the original force power cog handle the actor effects (just as the actor_*.cog files do). The bot force cog will need to implement the required effects on the player (just as the darkjedi_*.cog files do) as well as on other bots (like kyle.cog? or like darkjedi_*.cog? either way would probably work. Probably darkjedi_*.cog style would be cleaner as most of the handling code would then be the same for both bots and players, rather than having a skill-like handler for bots and a force_*.cog like handler for players).
		--> UPDATE: This may be more trouble than it's worth. Force blinding just sets the 0x800/blind flag on actors without sending a skill message, and some of the MotS powers (including push and chainlight) do likewise and apply effects to actors without sending a skill message. A compromise may be to keep the hacked force powers for "best/most authentic experience" but stub some skill message content that will allow the vanilla force cogs to still interact with the bots for "acceptable experience" in case the nohotkeys patch cannot be used for some reason.

general - technical debt - retire hacked player and backpack cogs - Assuming another solution can be found to replace the bot score hack in kyle.cog, I believe it is possible to use the vanilla kyle.cog and pow_backpack.cog files, and to use rbot-backpack.cog for only the backpacks dropped by bots (bot srv cogs can handle force fx on player just like dark jedi cogs do, no skill trigger hacks needed)
general - backpack note - while debugging backpack messages, etc., I observed a situation where I died in between two bots, then one backpack was created, but two triggers were received by the backpack cog to pick up the backpack. Might be both srv2 cogs trying to pick up the backpack in the same instant. Since the one cog will use TakeItem() to remove the backpack, I don't see how the second cog could still see the backpack thing after TakeItem() gets called. Any refactoring to the backpack cog should be mindful of this double trigger possibility and guard against unwanted side effects of the double trigger happening (i.e. clear backpack thing from data list so when the second trigger arrives, no data is found for the second bot to pick up).
general - technical debt - refactor cog ref arrays to linked list iteration (startup/srv?, admin/srv? nav/nav-special, nav/path, path/pathinfo?)
general - technical debt - phase out SendMessageEx based API and use triggers instead
			--> NO!  Performance testing demonstrates that messages are more efficient (as expected) as too many triggers does hurt performance (e.g. item special info triggers)
			--> Demonstration: compare performance in challenge level with the "if (GetThingType(item) == 5)" check enabled/disabled in findpowerups message - night and day difference, even though there is still noticeable lag even with the check enabled
general - srv2 sends trigger 12200 when the bot gets < 0.3 JKU close to ANY item - it really only needs to do this for the CTF key templates. srv2 will repeatedly send this trigger every pulse while the bot is holding a flag.

general - bots may be a bit too consistently accurate on lower difficulties, adjust accuracy curve so the difference is more noticeable
general - default bot difficulty based on player selected difficulty (GetDifficulty()), remove difficulty param from startup cog
general - higher bot difficulty idea - if bot and target are about level with each other (Z diff < some small JKU value), shoot explosive projectiles (primary fire for raildet and concrifle) at ground by target instead of trying to hit target directly?  If the bot has trouble hitting the target with a direct shot, shooting the ground like a player often would might be better

general - technical debt: refactor startup cog to not create bot spawn point things (i.e. retire rbot_respawn template) so we don't needlessly consume up to 32 thing refs (we can use vectors, sectors, etc. instead)
general - creating a thing at bot's next location / item / target enables monitoring within botcam and also to "highlight" multiple items concurrently. The infrastructure for this is already present now because of the node removal feature
general - some nodes are too high in existing levels (including bes, spaceport=DONE, TBD)
general - is force speed negated by rbot-special 0x2/slow flag?  i.e. when that special effect ends, does the bot return to normal speed instead of force speed?
general - check bot speed when walking backward. Is it the correct speed (i.e. slowed) or does bot move at same speed as when running forward?

general - path changing - pick fairly even when multiple intersections are from a single path (e.g. path starts and ends with same node, or node occurs multiple times in the path)
general - lost bot - if a lost bot is nearest the node that starts and ends a looping path, the bot will always run forward on the path. I believe this is because the nav cog skips over the currently-saved candidate node instead of randomly choosing from among the "duplicate" choices. I think the logic could be altered so when the current candidate node is encountered again in another path/node index, then it can do a random check to swap the new instance with the saved instance. This can be a fair check like the intersection path change check (1 in N+1 chance to select a path at an N-way intersection)

general - bot backpack pickup does not honor player automaount settings
general - bot shields do not function exactly like player shields - at 50 shields, damage starts to be split between shields and health for players, but for bots, the shields must be depleted completely before the bot will start taking health damage. See TODO in rbot-srv.cog
general - make bot pit death behave more like player - player will fade to black and respawn without dropping a backpack, but buts will kill themselves and needlessly drop a backpack. It would be nice to emulate the player pit death behavior as much as possible

general - technical debt: sort cogs to minimize jkl changes (put srv cogs first and then paths, special, etc. cogs that change count more toward the bottom)

ctf - technical debt: CTF/botname cogstring collision - CTF uses cogstrings in the 10xx range, which conflict with the default bot name strings needed for rbots - as a workaround, the CTF levels use the 15xx range for botnames instead of 10xx - all bot names add +500 to match this change
	--> caesars needed to do this, too

ctf - reflect team bots on the team player count display in the CTF lobby area (and anywhere else it is shown)

kfy - implement MotS KFY support

mots - feature: in team play, use personality skins, not just kyle team skins
mots - additional force powers support (powers not yet supported by rbots are still handled in the player cog skill message)
mots - additional weapons support
mots - I think the player can freeze and kill bots that have a supershield - supershield normally protects player from being frozen (see skill message in kyle_m.cog)

duel - bots try to walk through force fields - maybe we can adjust paths and disable segments going through doorways when force fields are active?
duel - polish the paths to maximize level coverage

arena - is it possible to teach the bots how to get to the raildet and concrifle secret areas?  how about the revive in the lower area

challenge - for some reason, the SAS doors don't always work for bots (gold side colored SAS has issues - red side colored SAS also has issues - need to confirm other cases)
challenge - bots will get stuck in the elevator shaft leading up to the gold base, probably from multiple bots awaiting arrival of the elevator and both attempting to enter the shaft when it arrives (first bot gets on elevator, second bot falls into shaft). The bot is unable to get out of the shaft in most cases, blocking the elevator from arriving for other bots.

bes - bots don't use the force field trap

nar - bots try to walk through the force field
nar - bots try to run the wrong way on the conveyor belts - srv doesn't detect bot obstructed, since the "velocity" (relative to the moving floor) is "good"
nar - redo paths - upper area by force field needs node size tweaks to mitigate bots falling; path leading from conveyor to elevator is unidirectional, so the bot will only go up the elevator on the right side and never down (this is leftover from the old rbot-nav cog that limited path count and size)

oasis - custom lightning trap cog uses auto-aim (FireProjectile) while original cog does not (CreateThing). Probably done to make the lightning actually hit the bots. Or maybe just an oversight. Anyway, the auto-aim only has an effect if auto-aim is enabled in the player's setup menu options
oasis - removal of jump node at top of ramp by lightning trap in a previous commit makes the bot only able to reach the mines by obstruction jump (or by jumping from the trap switch platform). This could be optimized to implement a proper special info jump for the bot.
oasis - technical debt: some 0x2/slow movement special info may be obsolete if it was added to make sharp turns work better (e.g. underwater intersection, upper platform). Node size adjustments may be necessary to compensate for the special info removal.

valley - pathing through lower level could be improved for reliability, sometimes bots don't quite navigate the path exactly as intended and the bot will end up behind a crate or close to/under the elevator as a result
valley - sometimes bot jumping onto elevator in lower area isn't quite right due to change in bot jump height in previous commit

freezer - item seeking causes bots to jump over/into pits in center area
freezer - light-up tubes don't light up for bots
freezer - there was a weird case under the platform by the elevator/windows where the bot wasn't running and could only jump (like the outer catwalk in the gantry level)
freezer - bots sometimes/often can't properly ride the rising air by the elevators up toward the central area
freezer - bots cannot pick up the rbacta (because of srv2 template mismatch) in the northern-most room but item seeking tries to make them pick it up anyway (because of srv model match); bot can get "stuck" trying to pick up the rbacta until something else draws its attention away from the rbacta (this issue will likely be repaired by updating the srv/srv2 cogs to seek items only by template and not by model)

throne - bots sometimes jump over/into pits (usually in combat mode trying to reach enemy bots)

gantry - outer catwalk hopping, bots can't run on all of the catwalk - idea: maybe an invisible 3do that sits on top of the catwalk in one sector? i.e. have the bot walk on that 3do in the problem sector instead of directly on the catwalk 3do

temple - bots sometimes get temporarily stuck behind doorway extruded frames

==================== IDEAS ====================

** Rbots Jed Plugin **

	would this be at all useful?
	could even just do JS+OLE - don't necessarily need a compiled EXE/DLL

	plugin ideas:
	DONE
		Upgrade to current Rbots (convert rbot-nav.cog into rbot-nav.cog + rbot-path.cogs + rbot-pathinfo-ctf.cogs, add rbot-srv-force.cog from rbot-srv.cog, etc.)
		Rbot Consistency Checker
			validate bot ids, path ids, check for missing/duplicate cogs, etc.
				this could have knowledge of CTF/MotS, too -- if CTF_MAIN.COG present or Jed in MotS mode, tweak handling accordingly
		(alpha prototype) Path preview using 3d preview
	TODO
		Create path from selection
			select node things, add a new path
		Cog management GUI? (add/remove/reorder bots, etc.)
		Set node height from ground (does OLE API give enough to impl this? put on your geometry hat...)
		Bot model wizard (for JK):
			Select base model (e.g. kya18.3do), generate weapon mesh models (yun-0.3do, yun-1.3do, etc.)
			Basically incorporate the standalone Rbots Character Wizard into the plugin, but allow selection of models, etc. via JED (use game paths, etc. to find stuff in GOBs)
		Bot template wizard:
			prompt for 3do, soundclass, etc. and update master.tpl/mots.tpl
		Add bot wizard:
			prompt for skin, name, flags, team, etc.
		Layer path nodes:
			put all path node things in navigation layer
			(or maybe more generally, a plugin to select nodes - all or by path
		bot arrival node wizard
			automate setting up a node for bot arrival cog
		node/surf/sector special info management (display, set info)

** MAYBE -- Level-based bot admin menu **

	make bot admin a level-accessible feature so it will work with more mods
	use rbot patch only for "remote control" to bot admin, not as full impl

	this may rely on unsync'd createthingatpos to create a HUD menu that follows the player's POV
		of course, if it's a level based menu, how does the player "click"?  that would normally be a weapon fire message or a bin activate message, right?

** Character flags **
	The character flags params have been removed since the feature was never implemented.
	Refer to the duel level for example of where it had been configured, even though it wasn't used (it was basically alternating charflags=1,1,2,2,1,1,2,2,... like the force power usage)

	defensive and offensive idea - have path flags entered in rbot-pathinfo-ctf.cog for each path that indicate whether the path is usable for each personality type
	alternatively, set min/max path ranks that the bot can use
	really, the bot can use any path, but if it comes across a "preferred" path, it will try to use that instead
	the idea is to have defensive bots stay close to their own base and offensive close to the opposing base (unless they steal the flag)

** More Nav Flags and lost bots handling **

	TODO	this may eliminate the need for the new nav flags:
		when bot lost and nav can't find node, start a timer to query nav every second for nearest node
		stop timer on bot death or nav returning a node
		separate timer to randomly regenerate a lost wander vector every 3 seconds
		tbd - lostcount changes
		--> see lost-bot-cleanup shelve for WIP
	TODO	stretch - mitigate infinite wait for lower elevator near gold sas entrance
	TODO	stretch - nav cog - flag to ignore vertical distance checks when finding node for lost bot
	TODO	stretch - nav cog - flag to ignore LOS, vertical distance checks, etc. if bot and node are in the same sector when finding node for lost bot
	TODO	propagate changes to other levels/episodes, then squash merge back to master

** OBE: To ID or not to ID? **
	It's nice to have stuff work without needing to manage IDs (e.g. path cogs), but it makes some things harder because you would need to deduce the synthesized ID somehow or be given a cog reference number.
	Manually assigned IDs, although slightly extra work for the developer, are more trigger-friendly and make it easier to reference the cog by its identity rather than as a hard reference number that potentially needs to be converted to an ID for the rest of the system to work.
	For example, it would be a bit clearer to add rbot-path.cog with id=13 and add rbot-path-special-ctf.cog (or whatever) with id=13, rather than using cog numbers (e.g. cog #83)
	If ID auto-generation is needed, here's an idea to generate ordered IDs from 0..N-1, given N cogs:
		In e.g. rbot-path.cog
			startup:
			...
				SendTrigger(-1, 12345, ... GetSelfCog(), ...);
			...
			trigger:
			...
				if (GetSOurceRef() == 12345) {
					if (GetSelfCog() > GetParam(...)) id = id + 1;
		In e.g. rbot-nav.cog
			trigger:
			...
				if (GetSOurceRef() == 12345) {
					path_count = path_count + 1; // Increment for each path discovered
			...
				// for each path
			...
					// Ask path with some ID to return info
					SendTrigger(-1, 12003, path_id, params...)

** Compress path node gaps **
	It would be nice if the path cogs could automatically "compress" a node list like:
		-1, -1, 443, 444, 465, -1, 467, -1, ...
	into a compacted form like:
		443, 444, 465, 467, -1, ... (path_size = 4)
	This would alleviate the burden of developers manually compressing path nodes in ZED
	Example code:
		path_size = 0; // while iterating, always points to the next open node slot
		for (i = 0 ; i < 25 ; i = i + 1) {
			if (node0[i] != -1 && path_size < i) {
				// There are gaps in the node list, compact the list into contiguous form by
				// moving nodes backward to fill any gaps
				node0[path_size] = node0[i];
				node0[i] = -1; // optional - make sure unused node slots are cleared
				path_size = path_size + 1;
			}
		}

** Saber fighting improvements **
	+rbotsaberhit1 template is not used.
	srv timer id 200 and 201 are the same code
	When bot blocks player saber, +ssparks_blood gets created (by game engine) instead of +ssparks_saber.
	Bot saber attacks (+rbotsaber1/2 templates) don't create any of the +ssparks_* templates.

	Idea: Add class cog to +rbotsaber1/2 that can receive feedback from the srv cog and create the appropriate explosion template.
	For example, the +rbotsaber1/2 templates could have a class cog resembling:
		user0:
			exp = GetParam(0);
			hit_type = GetParam(1);
			SetThingUserData(exp, hit_type);
			return;
		removed:  // or timer+DestroyThing()
			
			if (GetThingUserData(exp) == 1) // create +ssparks_saber
			else // create ++ssparks_blood
			return;
	The srv cog could send a user0 message to the class cog of the damager when the bot has blocked the saber attack.
	Actually, there's a parent/child discrepancy here that needs to be resolved. +rbotsaber1/2 is what the srv cog would have as 'damager' but the message needs to be delivered to the explosion thing

	Demo: See branch experiment-saber-fx to demo creation of FX things by srv cog

==================== UNFIXABLE? ====================

general - purple saber mesh appears as gray in non-3d-accel mode
	--> I think this is because of colormap translucency mappings.  Namely, I think the colormap defines that when color X is viewed through color Y, it should be shown as color Z - X, Y, and Z must all be colors in the colormap, but 3d accel mode can "invent" the colors on the fly rather than being limited to the colors in the colormap.  The issue is that there are no purple-like colors in the colormap, so for the "color X shown through Y/purple" case, the only reasonable choice for Z is a gray-like color

general - when bots use force persuasion, player cannot see them (except on overlay map) when using force seeing -- unfortunately, this is probably not easily fixable since the game engine magically reveals applicable invisible players/actors based on whether bin 23 is active or not and this only works if the thing exists at level load time and has the 0x200 actor flag (i.e. similar barrier to actors having dynamic weapon meshes).
			--> bot also does not have twinkle stars (in JK)
			--> This issue does not apply to MotS - in the MotS version, bots are correctly shown/hidden by the engine as expected AND have force twinkle stars!
			--> workaround - there is a hack in the srv force cog to show/hide the bot based on whether bin 23 (force seeing) for the local player is active
			--> If player's force seeing is active when bot activates force persuasion, the bot momentarily "blinks" (geo 0) until the hack pulse sets it back (to geo 4).
